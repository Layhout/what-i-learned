<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }

        main {
            height: 100vh;
            background-color: darkcyan;
            display: grid;
            place-items: center;
        }

        section {
            width: 500px;
            position: relative;
            aspect-ratio: 1;
            transition: all .001s ease;
            transform: scale(1);
        }

        section div {
            position: absolute;
            bottom: 50%;
            left: 50%;
            width: 5px;
            height: 100px;
            background-color: white;
            transform-origin: bottom center;
            border-radius: 50px;
        }
    </style>
</head>

<body>
    <main>
        <section>
        </section>
    </main>

    <audio src="/public/in_the_mood.mp3"></audio>
    <button onclick="play()">play</button>

    <script>
        const audio = document.querySelector("audio");
        const num_of_bars = 180;
        const container = document.querySelector("section");
        let allDiv = "<div style='transform: rotateZ(0deg)' id='bar_0'></div>";
        for (let i = 1; i <= num_of_bars; i++) {
            allDiv += `<div style="transform: rotateZ(${i}deg);" id="bar_${i}"></div>`;
        }
        for (let i = 1; i <= num_of_bars; i++) {
            allDiv += `<div style="transform: rotateZ(-${i}deg);" id="bar_${i}n"></div>`;
        }
        container.innerHTML = allDiv;

        const play = _ => {
            const ctx = new AudioContext();
            const audioSource = ctx.createMediaElementSource(audio);
            const analayzer = ctx.createAnalyser();
            audioSource.connect(analayzer);
            analayzer.connect(ctx.destination);
            analayzer.fftSize = 512;
            const frequencyData = new Uint8Array(analayzer.frequencyBinCount);
            analayzer.getByteFrequencyData(frequencyData);
            console.log("frequencyData", frequencyData);

            const renderFrame = _ => {
                analayzer.getByteFrequencyData(frequencyData);
                for (let i = 0; i <= num_of_bars; i++) {
                    const index = (i + 10) * 2;
                    const fd = frequencyData[i];
                    const bar = document.querySelector("#bar_" + i);
                    if (!bar) continue;
                    const barN = document.querySelector("#bar_" + i + "n");
                    if (!barN) continue;
                    const barHeight = Math.max(100, fd * 0.7 || 0);
                    bar.style.height = barN.style.height = barHeight + "px";
                }
                container.style.transform = `scale(${Math.min(1.5, Math.max(1, frequencyData[3] * 0.006))})`;
                // console.log(Math.max(1, frequencyData[60] * 0.01));
                window.requestAnimationFrame(renderFrame);
            }
            renderFrame();
            audio.play();
        }
    </script>
</body>

</html>