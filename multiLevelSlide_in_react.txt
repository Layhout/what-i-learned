----- the component -----
import React, { useEffect, useRef, useState } from 'react';
import { BsChevronLeft, BsChevronRight } from 'react-icons/bs';
import style from "./MultiLevelSlide.module.css";

const MultiLevelSlide = ({ children, setSci }) => {
  const mainRef = useRef();
  const spRef = useRef({ // sp = slide properties
    wrapper: null,
    slides: [],
    click: false,
    startX: 0,
    startY: 0,
    mtX: 0,
    mtY: 0,
    bx: 0,
    by: [],
    sx: 0,
    sy: [],
    sd: null,
    flickingTime: null,
    inputbreak: false,
    scrollYTimer: null,
    now: null,
    then: Date.now(),
    interval: 1000 / 60, // 1000 / 60 = 60 frame per second
    delta: null,
    animationId: null,
  });
  const { current: sp } = spRef;
  const [slideIndex, setSlideIndex] = useState({ c: 0, t: null });
  const [slideColumnIndex, setSlideColumnIndex] = useState([]);
  const [wh, setWh] = useState("100vh");

  useEffect(() => {
    sp.wrapper = mainRef.current.querySelector("#MLS_slide_wrapper");
    sp.slides = sp.wrapper.querySelectorAll(".MLS_slide");
    sp.by = new Array(sp.slides.length).fill(0);
    sp.sy = new Array(sp.slides.length).fill(0);
    setSlideIndex(p => ({ ...p, t: sp.slides.length - 1 }));
    setSlideColumnIndex(new Array(sp.slides.length).fill(0));

    document.querySelector("html").dataset.home = "true";
    document.body.dataset.home = "true";

    sp.wrapper.addEventListener("pointerdown", handlePointerEvents);
    sp.wrapper.addEventListener("touchmove", handleTouchEvents);
    sp.wrapper.addEventListener("touchend", handleTouchEvents);

    document.addEventListener("pointermove", handlePointerEvents);
    document.addEventListener("pointerup", handlePointerEvents);
    document.addEventListener("pointerleave", handlePointerEvents);
    document.addEventListener("contextmenu", endSliding);
    document.addEventListener("keydown", keySliding);
    document.addEventListener("wheel", scrollSliding);

    autoScrollY();

    animate();

    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
      setWh(window.innerHeight + "px");
    }

    return () => {
      sp.wrapper.removeEventListener("pointerdown", handlePointerEvents);
      sp.wrapper.removeEventListener("touchmove", handleTouchEvents);
      sp.wrapper.removeEventListener("touchend", handleTouchEvents);

      document.removeEventListener("pointermove", handlePointerEvents);
      document.removeEventListener("pointerup", handlePointerEvents);
      document.removeEventListener("pointerleave", handlePointerEvents);
      document.removeEventListener("contextmenu", endSliding);
      document.removeEventListener("keydown", keySliding);
      document.removeEventListener("wheel", scrollSliding);
      document.querySelector("html").removeAttribute("data-home");
      document.body.removeAttribute("data-home");

      clearInterval(sp.scrollYTimer);
      cancelAnimationFrame(sp.animationId);
    }
  }, []);

  function animate() {
    sp.animationId = requestAnimationFrame(animate);

    sp.now = Date.now();
    sp.delta = sp.now - sp.then;

    if (sp.delta > sp.interval) {
      sp.then = sp.now - (sp.delta % sp.interval);

      const nx = sp.bx + sp.mtX;
      sp.sx = sp.sx + (0.07 * (nx - sp.sx));
      sp.wrapper.style.transform = `translateX(${sp.sx}%)`;
      const byI = Math.abs(sp.bx) / 100;
      const ny = sp.by[byI] + sp.mtY;
      sp.sy[byI] = sp.sy[byI] + (0.07 * (ny - sp.sy[byI]));
      sp.slides[byI].style.transform = `translateY(${sp.sy[byI]}%)`;
    }
  }

  useEffect(() => {
    setSci(slideColumnIndex);
  }, [slideColumnIndex]);

  function autoScrollY(restart = false) {
    if (sp.scrollYTimer) {
      clearInterval(sp.scrollYTimer);
      sp.scrollYTimer = null;
      if (!restart) return;
    }
    if (!sp.scrollYTimer) {
      sp.scrollYTimer = setInterval(() => {
        const byI = Math.abs(sp.bx) / 100;
        const tavsh = sp.slides[byI].querySelectorAll(".MLS_slide_column").length ? sp.slides[byI].querySelectorAll(".MLS_slide_column").length * -100 + 100 : 0;
        if (sp.by[byI] > tavsh) {
          sp.by[byI] += -100;
        } else {
          sp.by[byI] = 0;
        }
        setSlideColumnIndex(p => {
          const ta = [...p];
          ta[byI] = Math.abs(sp.by[byI]) / 100;
          return ta;
        });
      }, 5000)
    }
  }

  function handlePointerEvents(e) {
    switch (e.type) {
      case "pointerdown":
        e.preventDefault();
        startSliding(e, e.pointerType === "touch");
        break;
      case "pointermove":
        whileSliding(e);
        break;
      case "pointerup":
      case "pointerleave":
        endSliding(e, e.pointerType === "touch");
        break;
    }
  }

  function handleTouchEvents(e) {
    if (e.type === "touchmove") whileSliding(e.touches[0]);
    else endSliding(e.touches[0], true);
  }

  function startSliding(e) {
    autoScrollY();
    sp.click = true;
    sp.startX = (e.clientX / window.innerWidth) * 100;
    sp.startY = (e.clientY / window.innerHeight) * 100;
    sp.flickingTime = new Date().getTime();
  }

  function whileSliding(e, onMobile = false) {
    if (!sp.click && !onMobile) return;
    sp.mtX = ((e.clientX / window.innerWidth) * 100) - sp.startX;
    sp.mtY = ((e.clientY / window.innerHeight) * 100) - sp.startY;
    if (!sp.sd) {
      if (Math.floor(Math.abs(sp.mtX)) > Math.floor(Math.abs(sp.mtY))) sp.sd = "x";
      if (Math.floor(Math.abs(sp.mtX)) < Math.floor(Math.abs(sp.mtY))) sp.sd = "y";
    }
    if (sp.sd === "x") sp.mtY = 0;
    else sp.mtX = 0;
    sp.wrapper.style.pointerEvents = "none";
  }

  function endSliding(e, onMobile = false) {
    if (onMobile && e) return;
    if (!sp.scrollYTimer) autoScrollY();
    sp.sd = null;
    sp.click = false;
    const byI = Math.abs(sp.bx) / 100;
    // tavsh = total active vertical slide height
    const tavsh = sp.slides[byI].querySelectorAll(".MLS_slide_column").length ? sp.slides[byI].querySelectorAll(".MLS_slide_column").length * -100 + 100 : 0;
    // tsw = total slide width
    const tsw = sp.slides.length * -100 + 100;

    sp.wrapper.style.transition = "";
    sp.slides[byI].style.transition = "";

    if (sp.flickingTime && new Date().getTime() - sp.flickingTime < 500) {
      if (sp.mtX < 0 && sp.bx !== Math.ceil(tsw)) sp.bx += -100;
      if (sp.mtX > 0 && sp.bx !== 0) sp.bx += 100;
      if (sp.mtY > 0 && sp.by[byI] !== 0) sp.by[byI] += 100;
      if (sp.mtY < 0 && sp.by[byI] !== tavsh) sp.by[byI] += -100;
      sp.mtX = 0; sp.mtY = 0;
      sp.flickingTime = null;

      setSlideIndex(p => ({ ...p, c: Math.abs(sp.bx) / 100 }));
      setSlideColumnIndex(p => {
        const ta = [...p];
        ta[byI] = Math.abs(sp.by[byI]) / 100;
        return ta;
      });
      sp.wrapper.style.pointerEvents = "";
      return;
    }

    sp.mtX = Math.max(tsw - 10, Math.min(10, sp.bx + sp.mtX));
    if (sp.mtX > 0) sp.bx = 0;
    else if (sp.mtX < sp.slides.length * -100) sp.bx = tsw;
    else if ((sp.bx - sp.mtX) % 100 >= 30) sp.bx += -100;
    else if ((sp.bx - sp.mtX) % 100 <= -30) sp.bx += 100;
    sp.mtX = 0;

    sp.mtY = Math.max(tavsh - 10, Math.min(10, sp.by[byI] + sp.mtY));
    if (sp.mtY > 0) sp.by[byI] = 0
    else if (sp.mtY < tavsh) sp.by[byI] = tavsh;
    else if ((sp.by[byI] - sp.mtY) % 100 >= 30) sp.by[byI] += -100;
    else if ((sp.by[byI] - sp.mtY) % 100 <= -30) sp.by[byI] += 100;
    sp.mtY = 0;

    setSlideIndex(p => ({ ...p, c: Math.abs(sp.bx) / 100 }));
    setSlideColumnIndex(p => {
      const ta = [...p];
      ta[byI] = Math.abs(sp.by[byI]) / 100;
      return ta;
    });
    sp.wrapper.style.pointerEvents = "";
  }

  function scrollSliding(e) {
    if (sp.inputbreak) return;
    console.log(e.deltaX, e.deltaY);
    const scrollX = e.deltaX === -0 ? 0 : e.deltaX;
    const scrollY = e.deltaY === -0 ? 0 : e.deltaY;
    if (scrollX > 0 && sp.bx !== sp.slides.length * -100 + 100) {
      handleNav(1)
      sp.inputbreak = true;
      setTimeout(() => {
        sp.inputbreak = false;
      }, 1000)
      return;
    }
    if (scrollX < 0 && sp.bx !== 0) {
      handleNav(-1)
      sp.inputbreak = true;
      setTimeout(() => {
        sp.inputbreak = false;
      }, 1000);
      return;
    }
    const byI = Math.abs(sp.bx) / 100;
    // autoScrollY(true);
    if (scrollY > 0 && sp.slides[byI].querySelectorAll(".MLS_slide_column").length && sp.by[byI] !== sp.slides[byI].querySelectorAll(".MLS_slide_column").length * -100 + 100) {
      sp.by[byI] += -100;
      sp.inputbreak = true;
      setTimeout(() => {
        sp.inputbreak = false;
      }, 1000)
      setSlideColumnIndex(p => {
        const ta = [...p];
        ta[byI] = Math.abs(sp.by[byI]) / 100;
        return ta;
      });
      return;
    }
    if (scrollY < 0 && sp.by[byI] !== 0) {
      sp.by[byI] += 100;
      sp.inputbreak = true;
      setTimeout(() => {
        sp.inputbreak = false;
      }, 1000);
      setSlideColumnIndex(p => {
        const ta = [...p];
        ta[byI] = Math.abs(sp.by[byI]) / 100;
        return ta;
      });
      return;
    }
  }

  function keySliding(e) {
    if (e.key === "ArrowRight" && sp.bx !== sp.slides.length * -100 + 100) {
      handleNav(1)
      return;
    }
    if (e.key === "ArrowLeft" && sp.bx !== 0) {
      handleNav(-1)
      return;
    }
    // autoScrollY(true);
    const byI = Math.abs(sp.bx) / 100;
    if (e.key === "ArrowUp" && sp.by[byI] !== 0) {
      sp.by[byI] += 100;
      setSlideColumnIndex(p => {
        const ta = [...p];
        ta[byI] = Math.abs(sp.by[byI]) / 100;
        return ta;
      });
      return;
    }
    if (e.key === "ArrowDown" && sp.slides[byI].querySelectorAll(".MLS_slide_column").length && sp.by[byI] !== sp.slides[byI].querySelectorAll(".MLS_slide_column").length * -100 + 100) {
      sp.by[byI] += -100;
      setSlideColumnIndex(p => {
        const ta = [...p];
        ta[byI] = Math.abs(sp.by[byI]) / 100;
        return ta;
      });
      return;
    }
  }

  function handleNav(go) {
    // autoScrollY(true);
    if (go === -1 && sp.bx < 0) sp.bx += 100;
    else if (sp.bx > sp.slides.length * -100 + 100) sp.bx += -100;
    setSlideIndex(p => ({ ...p, c: p.c + go }));
  }

  return (
    <main ref={mainRef} className={style.slide_container} style={{ "--sh": wh }}>
      <ul id="MLS_slide_wrapper" className={style.slide_wrapper}>
        {children}
      </ul>
      <nav className={style.navigator}>
        <button hidden={slideIndex.c === 0} onClick={() => handleNav(-1)}><BsChevronLeft size={40} /></button>
        <button hidden={slideIndex.c === slideIndex.t} onClick={() => handleNav(1)}><BsChevronRight size={40} /></button>
      </nav>
    </main>
  )
}

export default MultiLevelSlide;
----- end of component -----



* ----- css of component ----- *
.slide_container {
  /* sh = slide height */
  --sh: 100vh;
  height: var(--sh);
  overflow: hidden;
  cursor: pointer;
  position: relative;
}

.slide_container ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.slide_container:active {
  cursor: grabbing;
}

.slide_wrapper {
  display: flex;
  transform: translate3d(0px, 0px, 0px);
}

.slide_wrapper > li {
  position: relative;
}

.slide_wrapper .slide,
.slide_wrapper .slide_column {
  width: 100vw;
  height: var(--sh);
  user-select: none;
  flex-shrink: 0;
}

.slide_wrapper .slide_column {
  overflow: hidden;
}

.slide {
  transform: translate3d(0px, 0px, 0px);
  position: relative;
}

.slide_wrapper h1 {
  font-size: 100px;
  font-weight: bold;
  margin: 0;
}

.navigator {
  position: absolute;
  top: 50%;
  left: 0;
  width: 100%;
  display: flex;
  align-items: center;
  height: 0;
  padding: 0 20px;
}

.navigator button {
  background: none;
  outline: none;
  border: none;
  color: black;
  cursor: pointer;
}

.navigator button:first-child {
  margin-right: auto;
}

.navigator button:last-child {
  margin-left: auto;
}

.indicatorYSlide {
  position: absolute;
  bottom: 10%;
  right: 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
}

.indicatorYSlide span {
  width: 5px;
  height: 5px;
  border: 1px solid white;
  border-radius: 10px;
}

----- end of css of component -----



* ----- how to use ----- *
import React from 'react'
import MainLayout from '../component/layout/MainLayout'
import MultiLevelSlide from '../component/multiLevelSlide/MultiLevelSlide'
import slide_style from "../component/multiLevelSlide/MultiLevelSlide.module.css";
import { Config, postWithToken } from '../helper';


const fakehomepage = props => {

    return (
        <MainLayout {...props} isFooter={false} >
            <MultiLevelSlide setSci={v => setSci(v)}>
              {props.home[0].sections.map((ss, i) => (
                <li key={i}>
                  <ul className={`${slide_style.slide} MLS_slide`}>
                    {ss.map((s, j) => (
                      <li key={j}
                        className={`${slide_style.slide_column} MLS_slide_column`}>
                        <div className={style.silde_item}
                          style={{
                            "--bg-web": `url("${Config.imagePath + s.image_web}")`,
                            "--bg-mobile": `url("${Config.imagePath + s.image}")`,
                            justifyContent: s.styles.position_x === "center" ? "center" : s.styles.position_x === "right" ? "flex-end" : "flex-start",
                            alignItems: s.styles.position_y === "middle" ? "center" : s.styles.position_y === "bottom" ? "flex-end" : "flex-start",
                          }}>
                          <div style={{ alignItems: s.styles.position_x === "center" ? "center" : s.styles.position_x === "right" ? "flex-end" : "flex-start" }} >
                            <h1 style={{ color: s.styles.color }}>{s.title[curlang]}</h1>
                            <p style={{ color: s.styles.color }}>{s.sub_title[curlang]}</p>
                          </div>
                        </div>
                      </li>
                    ))}
                  </ul>
                  {sci.length && <div className={slide_style.indicatorYSlide}>
                    {ss.map((_, k) => (
                      <span key={k} style={{ backgroundColor: sci[i] === k ? "white" : undefined }}></span>
                    ))}
                  </div>}
                </li>
              ))}
          </MultiLevelSlide>
        </MainLayout>
    )
}

export default fakehomepage;

export const getServerSideProps = async (context) => {
    try {
        let profile = null;
        if (context.req.cookies.profile) profile = JSON.parse(context.req.cookies.profile);
        var home = await postWithToken("Homepage/getHomePage2", null, profile);
        return {
            props: {
                ...home,
                mata_title: "Zando Cambodia",
                meta_title: home['meta_data'].meta_title,
                meta_description: home['meta_data'].meta_description,
                meta_keyword: home['meta_data'].meta_keyword
            },
        };
    } catch (err) {
        console.log(err);
        return {
            props: {
                mata_title: "",
                meta_title: "",
                meta_description: "",
                meta_keyword: ""
            },
        };
    }
};
----- end of how to use -----